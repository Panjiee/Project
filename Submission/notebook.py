# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E8_mN4A2xM3D3g8T_eKQUEkjwampH7H6

# Laporan Proyek Machine Learning - Rosyd Panjie Laras

## Project Overview
Deteksi dini kondisi kesehatan janin sangat penting dalam konteks perawatan ibu hamil karena membantu mencegah potensi risiko dan komplikasi yang dapat membahayakan kesehatan ibu dan janin. Janin dalam kandungan rentan terhadap berbagai faktor risiko dan perubahan kondisi yang dapat mempengaruhi kesehatannya. Dengan mendeteksi masalah kesehatan janin secara dini, tenaga medis dapat mengambil langkah-langkah yang tepat untuk mengurangi risiko dan mengoptimalkan perawatan.

Ketika masalah kesehatan janin terdeteksi lebih awal, intervensi medis yang tepat waktu dapat dilakukan. Misalnya, jika terjadi fluktuasi abnormal dalam detak jantung janin atau aktivitas gerakan, tenaga medis dapat melakukan evaluasi lebih lanjut atau mengambil langkah-langkah korektif untuk menghindari komplikasi lebih lanjut. Deteksi dini juga memungkinkan penilaian kondisi kesehatan ibu hamil secara keseluruhan, sehingga tindakan yang sesuai dapat diambil untuk menjaga kesehatan dan kenyamanannya.

Selain itu, model ini juga dapat meningkatkan komunikasi antara pasien dan tenaga medis, memberikan pemahaman yang lebih baik tentang kondisi kesehatan janin, dan membantu ibu hamil dalam mengambil keputusan yang tepat untuk kesejahteraan mereka dan bayi yang akan lahir.

## Business Understanding

### Problem Statements
- Bagaimana cara mengembangkan model machine learning yang memiliki kemampuan untuk mendeteksi dini kondisi kesehatan janin berdasarkan data medis yang tersedia ?

### Goals
Tujuan utama dari proyek ini adalah menciptakan model klasifikasi yang mampu mengenali berbagai kondisi kesehatan janin, seperti risiko gagal jantung, dengan memanfaatkan fitur-fitur medis yang terdapat dalam dataset. Dengan hadirnya model ini, diharapkan tenaga medis mampu mengambil langkah pencegahan atau intervensi yang lebih awal dan lebih tepat.

### Solution Approach
Solusi yang diajukan dalam proyek ini mencakup langkah-langkah berikut:

- Pengumpulan dan Pembersihan Data: Langkah awal melibatkan pengumpulan dataset yang berisi data medis terkait kesehatan janin. Data tersebut akan menjelaskan informasi klinis dan fisiologis yang relevan, seperti denyut jantung janin, gerakan janin, tekanan darah ibu, dan elemen lainnya. Data ini kemudian akan dibersihkan dengan mengatasi nilai kosong atau outliers.

- Teknik Preprocessing: Preprocessing dilakukan untuk memastikan data siap digunakan dalam melatih dan menguji model. Tahapan ini mencakup pembersihan data dengan menghapus nilai-nilai yang tidak valid dan penanganan outliers.

- Pengembangan Model Klasifikasi: Model klasifikasi akan dibangun menggunakan algoritma machine learning yang telah dipilih yaitu K-Nearest Neighbors (KNN), Random Forest, dan Decision Tree yang sesuai dengan karakteristik dan kebutuhan masalah deteksi kesehatan janin.

- Pelatihan Model: Model akan dilatih menggunakan data pelatihan dengan menerapkan Stratified K-Fold cross-validation, sambil menjalani proses GridSearch untuk mencari kombinasi optimal dari hyperparameter. Hal ini bertujuan untuk mengoptimalkan performa model dengan memilih konfigurasi hyperparameter yang terbaik dan menghindari bias serta varian yang tidak diinginkan.

- Evaluasi Model: Performa model akan dievaluasi menggunakan metrik-metrik seperti akurasi, presisi, recall, dan F1-score dengan menggunakan data pengujian.

### Import Libraries
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn import linear_model
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report
import seaborn as sns

"""### Read Datasets"""

df = pd.read_csv('fetal_health.csv')
df.head()

df.info()

"""Feature

- 'baseline value': Baseline FHR (denyut jantung janin) (ketukan per menit)
- 'accelerations': Jumlah percepatan per detik
- 'fetal_movement': Jumlah gerakan janin per detik
- 'uterine_contractions': Jumlah kontraksi rahim per detik
- 'light_decelerations': Jumlah penurunan ringan per detik
- 'severe_decelerations': Jumlah penurunan berat per detik
- 'prolongued_decelerations': Jumlah penurunan berkepanjangan per detik
- 'abnormal_short_term_variability': Persentase waktu dengan variasi jangka pendek yang abnormal
- 'mean_value_of_short_term_variability': Nilai rata-rata variasi jangka pendek
- 'percentage_of_time_with_abnormal_long_term_variability': Persentase waktu dengan variasi jangka panjang yang abnormal
- 'mean_value_of_long_term_variability': Nilai rata-rata variasi jangka panjang
- 'histogram_width': Lebar histogram FHR
- 'histogram_min': Minimum (frekuensi rendah) dari histogram FHR
- 'histogram_max': Maksimum (frekuensi tinggi) dari histogram FHR
- 'histogram_number_of_peaks': Jumlah puncak dalam histogram
- 'histogram_number_of_zeroes': Jumlah nol dalam histogram
- 'histogram_mode': Modus histogram
- 'histogram_mean': Rata-rata histogram
- 'histogram_median': Median histogram
- 'histogram_variance': Variansi histogram
- 'histogram_tendency': Kecenderungan histogram
Target:

- 'fetal_health': Diberi label sebagai 1 (Normal), 2 (Sangat Diduga), dan 3 (Patologis)
"""

df.describe()

print(f"Dataset size: {df.shape}")

"""### Data Visualization"""

# Feature Distribution
hist_plot = df.hist(figsize = (20,20))

# Correlation Matrix
correlation_matrix = df.corr()
plt.figure(figsize=(20, 20))
sns.heatmap(correlation_matrix, cmap='coolwarm', annot=True)
plt.title("Correlation Plot of the Heart Failure Prediction")

plt.show()

"""### Data Preprocessing"""

# Print the count of null values in each column
print("Null Value Counts:")
print(df.isnull().sum())

"""Tidak terdapat null values pada dataset jadi tidak perlu dilakukan perubahan"""

# Outlier check with plot
colours = ['blue', 'orange', 'green']

# Create the scatter plot
sns.scatterplot(data=df, x="mean_value_of_long_term_variability", y="fetal_movement", palette=colours, hue="fetal_health")

# Show the plot
plt.show()

"""Terlihat adanya outlier dalam dataset. Karena data diperoleh dari mesin CTG, keberadaan outlier mungkin memiliki signifikansi medis yang penting. Oleh karena itu, tidak perlu mengubah dataset untuk mengatasi outlier."""

# Data Scaling
scaler = StandardScaler()
X = df.drop(["fetal_health"],axis=1)
y = df['fetal_health']

columns = list(X.columns)
X_scaled = pd.DataFrame(scaler.fit_transform(X), columns = columns)
X_scaled.describe()

# Split the data using train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""### Model Fit"""

models = {
    'Logistic_Regression': LogisticRegression(),
    'Random_forest': RandomForestClassifier(),
    'KNN': KNeighborsClassifier()
}

# Fit the models on the training data
for model_name, model in models.items():
    model.fit(X_train, y_train)

results = []

# Define StratifiedKFold
stratified_kfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

# Iterate through the models dictionary and perform Grid Search
for key, model in models.items():
    print("Model:", key)

    # Define the hyperparameters to search for each model
    param_grid = {}

    if key == 'Logistic_Regression':  # Logistic Regression
        param_grid = {
            'C': [0.001, 0.01, 0.1, 1, 10, 100],
            'max_iter': [1000, 1500, 2000],
            'solver': ['lbfgs', 'liblinear', 'sag', 'saga']
        }
    elif key == 'Random_forest':  # Random Forest
        param_grid = {
            'n_estimators': [50, 100, 200],
            'max_depth': [None, 10, 20, 30],
            'min_samples_split': [2, 5, 10],
            'min_samples_leaf': [1, 2, 4]
        }
    elif key == 'KNN':  # K-Nearest Neighbors
        param_grid = {
            'n_neighbors': [3, 5, 7, 10],
            'weights': ['uniform', 'distance'],
            'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute']
        }

    # Initialize Grid Search with the model and hyperparameters
    grid_search = GridSearchCV(model, param_grid, cv=stratified_kfold, scoring='accuracy', verbose=1)

    # Perform Grid Search on the data
    grid_search.fit(X_train, y_train)

    # Get the best hyperparameters and model
    best_params = grid_search.best_params_
    best_model = grid_search.best_estimator_

    # Append results to the list
    results.append((key, best_model))

"""### Evaluation"""

def evaluate_model(model, X_test, y_test):
    # Make predictions on the test set using the best model
    y_pred = model.predict(X_test)

    # Calculate and print accuracy
    accuracy = accuracy_score(y_test, y_pred)
    print("Accuracy:", accuracy)
    print("\n")

    # Calculate and print confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    print("Confusion Matrix:\n", cm)

    # Define target names for classification report
    target_names = ['Normal', 'Suspect', 'Pathological']

    # Generate classification report
    report = classification_report(y_test, y_pred, target_names=target_names)
    print("Classification Report:\n", report)

    return accuracy

# Initialize an empty list to store evaluation results
evaluation_results = []

# Evaluate each model and store results
for key, model in results:
    print("Model:", key)
    accuracy = evaluate_model(model, X_test, y_test)
    evaluation_results.append((key, accuracy))
    print("\n")

# Create a DataFrame from the evaluation results list
evaluation_df = pd.DataFrame(evaluation_results, columns=["Model", "Accuracy"])

# Sort the DataFrame by accuracy in descending order
evaluation_df = evaluation_df.sort_values(by="Accuracy", ascending=False)

# Set the "Model" column as the index
evaluation_df = evaluation_df.set_index("Model")

# Display the evaluation results
print(evaluation_df)